generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  name           String
  email          String    @unique
  password       String
  accessId       Int?
  sale_as_buyer  Sale[]    @relation("buyer")
  sale_as_seller Sale[]    @relation("seller")
  store          Store[]
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  Access         Access?   @relation(fields: [accessId], references: [id])
  Cart           Cart?
}

model Access {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  userAccess User[]
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  image       String
  category    String
  platform    String
  price       Float
  amount      Int
  created_at  DateTime   @default(now())
  updated_at  DateTime   @default(now())
  Store       Store?     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId     Int?
  SaleProduct SaleProduct[]
  CartItem    CartItem[]
  views       Int      @default(0)
}

model Store {
  id         Int        @id @default(autoincrement())
  name       String
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  products   Product[]
  User       User?      @relation(fields: [userId], references: [id])
  userId     Int?
}

model Sale {
  id          Int        @id @default(autoincrement())
  total_value Float
  Buyer       User?      @relation("buyer", fields: [buyerId], references: [id])
  buyerId     Int?
  Seller      User?      @relation("seller", fields: [sellerId], references: [id])
  sellerId    Int?
  SaleProduct SaleProduct[]
  created_at  DateTime   @default(now())
  updated_at  DateTime   @default(now())
}

model SaleProduct {
  id         Int        @id @default(autoincrement())
  quantity   Int
  Sale       Sale       @relation(fields: [saleId], references: [id])
  saleId     Int
  Product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
}
model Cart {
  id         Int        @id @default(autoincrement())
  user       User       @relation(fields: [userId], references: [id])
  userId     Int        @unique 
  items      CartItem[]
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
}

model CartItem {
  id         Int      @id @default(autoincrement())
  cart       Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId     Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
  quantity   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}